package moneroproto

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
)

type SimpleObject struct {
	Txs uint64 `monerobinkv:"txs"`
}

type NestedObjects struct {
	Block1 SimpleObject `monerobinkv:"block1"`
	Block2 SimpleObject `monerobinkv:"block2"`
}

func TestNestedObjectEncode(t *testing.T) {
	expected := []byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x08, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
		0x31, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
		0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0xff, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa}

	obj := NestedObjects{SimpleObject{0x1122334455667788}, SimpleObject{0xaabbccddeeff00ff}}
	buffer := bytes.Buffer{}

	err := Write(&buffer, obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, buffer.Bytes())
}

func TestNestedObjectDecode(t *testing.T) {
	reader := bytes.NewReader([]byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x08, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
		0x31, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
		0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0xff, 0x00,
		0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa})

	expected := NestedObjects{SimpleObject{0x1122334455667788}, SimpleObject{0xaabbccddeeff00ff}}
	var obj NestedObjects
	err := Read(reader, &obj)

	assert.Nil(t, err)
	assert.Equal(t, expected.Block1.Txs, obj.Block1.Txs)
	assert.Equal(t, expected.Block2.Txs, obj.Block2.Txs)
}

type Uint16Array struct {
	Array []uint16 `monerobinkv:"array"`
}

func TestUint16ArrayEncode(t *testing.T) {
	expected := []byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
		0x87, 0x14, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00}

	obj := Uint16Array{[]uint16{1,2,3,4,5}}
	buffer := bytes.Buffer{}

	err := Write(&buffer, obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, buffer.Bytes())
}

func TestUint16ArrayDecode(t *testing.T) {
	expected := Uint16Array{[]uint16{1,2,3,4,5}}

	reader := bytes.NewReader([]byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
		0x87, 0x14, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00})

	var obj Uint16Array
	err := Read(reader, &obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, obj)
}

type ArrayObjects struct {
	Blocks []SimpleObject `monerobinkv:"objects"`
}

func TestArrayObjectsEncode(t *testing.T) {
	expected := []byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63,
		0x74, 0x73, 0x8c, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x04,
		0x03, 0x74, 0x78, 0x73, 0x05, 0xff, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05,
		0xef, 0xbe, 0xad, 0xde, 0xbe, 0xba, 0xad, 0xde}

	obj := ArrayObjects{[]SimpleObject{
		{uint64(0x1122334455667788)},
		{uint64(0xaabbccddeeff00ff)},
		{uint64(0xdeadbabedeadbeef)},
	}}

	buffer := bytes.Buffer{}
	err := Write(&buffer, obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, buffer.Bytes())
}

func TestArrayObjectsDecode(t *testing.T) {
	expected := ArrayObjects{[]SimpleObject{
		{uint64(0x1122334455667788)},
		{uint64(0xaabbccddeeff00ff)},
		{uint64(0xdeadbabedeadbeef)},
	}}

	reader := bytes.NewReader([]byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x07, 0x6f, 0x62, 0x6a,
		0x65, 0x63, 0x74, 0x73, 0x8c, 0x0c, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
		0x11, 0x04, 0x03, 0x74, 0x78, 0x73, 0x05, 0xff, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x04, 0x03, 0x74, 0x78,
		0x73, 0x05, 0xef, 0xbe, 0xad, 0xde, 0xbe, 0xba, 0xad, 0xde})

	var obj ArrayObjects
	err := Read(reader, &obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, obj)
}

type BinaryStringArray struct {
	Txs [][]byte `monerobinkv:"txs"`
}

func TestBinaryStringArrayEncode(t *testing.T) {
	expected := []byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x03, 0x74, 0x78, 0x73, 0x8a, 0x0c,
		0x18, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x20, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x43,
		0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43}

	obj := BinaryStringArray{ [][]byte {
		[]byte("AAAAAA"), []byte("BBBBBBBB"), []byte("CCCCCCCCC"),
	}}

	buffer := bytes.Buffer{}
	err := Write(&buffer, obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, buffer.Bytes())
}

func TestBinaryStringArrayDecode(t *testing.T) {
	expected := BinaryStringArray{ [][]byte {
		[]byte("AAAAAA"), []byte("BBBBBBBB"), []byte("CCCCCCCCC"),
	}}

	reader := bytes.NewReader([]byte{0x01, 0x11, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x04, 0x03, 0x74, 0x78, 0x73, 0x8a, 0x0c,
		0x18, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x20, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x24, 0x43,
		0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43})

	var obj BinaryStringArray
	err := Read(reader, &obj)

	assert.Nil(t, err)
	assert.Equal(t, expected, obj)
}